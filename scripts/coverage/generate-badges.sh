#!/bin/bash

# ==============================================================================
# Coverage Badge Generator for ProbotSharp
# ==============================================================================
# Generates SVG badges for coverage metrics that can be embedded in README files
# Uses coverage.json files generated by coverlet to create shields.io-style badges
#
# Usage:
#   ./scripts/coverage/generate-badges.sh [output-dir]
#
# Options:
#   output-dir    Directory for badge files (default: coverage-report/badges)
#
# Generated badges:
#   - coverage-line.svg       Overall line coverage
#   - coverage-branch.svg     Overall branch coverage
#   - coverage-domain.svg     Domain layer coverage
#   - coverage-application.svg Application layer coverage
#   - coverage-infrastructure.svg Infrastructure layer coverage
# ==============================================================================

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
COVERAGE_DIR="$PROJECT_ROOT/coverage-report"
OUTPUT_DIR="${1:-$COVERAGE_DIR/badges}"

# Ensure output directory exists
mkdir -p "$OUTPUT_DIR"

echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}   ProbotSharp Coverage Badge Generator${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"

# Function to determine badge color based on percentage
get_badge_color() {
    local percentage=$1
    if (( $(echo "$percentage >= 80" | bc -l) )); then
        echo "brightgreen"
    elif (( $(echo "$percentage >= 60" | bc -l) )); then
        echo "yellow"
    elif (( $(echo "$percentage >= 40" | bc -l) )); then
        echo "orange"
    else
        echo "red"
    fi
}

# Function to generate an SVG badge
generate_badge() {
    local label="$1"
    local value="$2"
    local color="$3"
    local output_file="$4"

    # Clean percentage value
    local clean_value="${value%.*}%"

    # Calculate text widths (approximate)
    local label_width=$((${#label} * 7 + 10))
    local value_width=$((${#clean_value} * 7 + 10))
    local total_width=$((label_width + value_width))

    cat > "$output_file" << EOF
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="$total_width" height="20">
  <linearGradient id="b" x2="0" y2="100%">
    <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
    <stop offset="1" stop-opacity=".1"/>
  </linearGradient>
  <clipPath id="a">
    <rect width="$total_width" height="20" rx="3" fill="#fff"/>
  </clipPath>
  <g clip-path="url(#a)">
    <path fill="#555" d="M0 0h${label_width}v20H0z"/>
    <path fill="$color" d="M${label_width} 0h${value_width}v20H${label_width}z"/>
    <path fill="url(#b)" d="M0 0h${total_width}v20H0z"/>
  </g>
  <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">
    <text x="$((label_width / 2))" y="15" fill="#010101" fill-opacity=".3">$label</text>
    <text x="$((label_width / 2))" y="14">$label</text>
    <text x="$((label_width + value_width / 2))" y="15" fill="#010101" fill-opacity=".3">$clean_value</text>
    <text x="$((label_width + value_width / 2))" y="14">$clean_value</text>
  </g>
</svg>
EOF
}

# Function to extract coverage from JSON file
extract_coverage() {
    local json_file="$1"
    local metric="$2"  # "line" or "branch"

    if [[ ! -f "$json_file" ]]; then
        echo "0"
        return
    fi

    # Check if it's a reportgenerator summary (has .summary field)
    if jq -e '.summary' "$json_file" &>/dev/null; then
        # ReportGenerator format
        if [[ "$metric" == "line" ]]; then
            jq -r '.summary.lineCoverage // 0' "$json_file" 2>/dev/null || echo "0"
        else
            jq -r '.summary.branchCoverage // 0' "$json_file" 2>/dev/null || echo "0"
        fi
    else
        # Coverlet raw format - calculate coverage from all assemblies
        local total_lines=0
        local covered_lines=0
        local total_branches=0
        local covered_branches=0

        # Iterate through all assemblies
        for assembly in $(jq -r 'keys[]' "$json_file" 2>/dev/null); do
            # Iterate through all files in the assembly
            for file_key in $(jq -r ".\"$assembly\" | keys[]" "$json_file" 2>/dev/null); do
                # Iterate through all classes in the file
                for class_key in $(jq -r ".\"$assembly\".\"$file_key\" | keys[]" "$json_file" 2>/dev/null); do
                    # Iterate through all methods in the class
                    for method_key in $(jq -r ".\"$assembly\".\"$file_key\".\"$class_key\" | keys[]" "$json_file" 2>/dev/null); do
                        # Get line and branch data
                        local method_data=$(jq -r ".\"$assembly\".\"$file_key\".\"$class_key\".\"$method_key\"" "$json_file" 2>/dev/null)

                        if [[ "$metric" == "line" ]]; then
                            local lines=$(echo "$method_data" | jq -r '.Lines | length' 2>/dev/null || echo 0)
                            local lines_covered=$(echo "$method_data" | jq -r '[.Lines | to_entries[] | select(.value > 0)] | length' 2>/dev/null || echo 0)
                            total_lines=$((total_lines + lines))
                            covered_lines=$((covered_lines + lines_covered))
                        else
                            local branches=$(echo "$method_data" | jq -r '.Branches | length' 2>/dev/null || echo 0)
                            local branches_covered=$(echo "$method_data" | jq -r '[.Branches[] | select(.Hits > 0)] | length' 2>/dev/null || echo 0)
                            total_branches=$((total_branches + branches))
                            covered_branches=$((covered_branches + branches_covered))
                        fi
                    done
                done
            done
        done

        # Calculate percentage
        if [[ "$metric" == "line" ]]; then
            if [[ $total_lines -gt 0 ]]; then
                echo "scale=2; ($covered_lines * 100) / $total_lines" | bc
            else
                echo "0"
            fi
        else
            if [[ $total_branches -gt 0 ]]; then
                echo "scale=2; ($covered_branches * 100) / $total_branches" | bc
            else
                echo "0"
            fi
        fi
    fi
}

# Find the most recent coverage JSON files
echo -e "${YELLOW}► Searching for coverage JSON files...${NC}"

# Overall coverage
OVERALL_JSON=$(find "$COVERAGE_DIR" -name "coverage.json" -type f 2>/dev/null | head -1)

if [[ -n "$OVERALL_JSON" && -f "$OVERALL_JSON" ]]; then
    echo -e "${GREEN}✓ Found overall coverage: $OVERALL_JSON${NC}"

    LINE_COVERAGE=$(extract_coverage "$OVERALL_JSON" "line")
    BRANCH_COVERAGE=$(extract_coverage "$OVERALL_JSON" "branch")

    # Generate overall badges
    echo -e "${YELLOW}► Generating overall coverage badges...${NC}"

    generate_badge "coverage" "$LINE_COVERAGE" \
        "$(get_badge_color "$LINE_COVERAGE")" \
        "$OUTPUT_DIR/coverage-line.svg"
    echo -e "${GREEN}✓ Generated: coverage-line.svg (${LINE_COVERAGE}%)${NC}"

    generate_badge "branch" "$BRANCH_COVERAGE" \
        "$(get_badge_color "$BRANCH_COVERAGE")" \
        "$OUTPUT_DIR/coverage-branch.svg"
    echo -e "${GREEN}✓ Generated: coverage-branch.svg (${BRANCH_COVERAGE}%)${NC}"
else
    echo -e "${RED}✗ No overall coverage.json found${NC}"
fi

# Per-layer coverage
echo -e "${YELLOW}► Generating layer-specific badges...${NC}"

# Domain layer
DOMAIN_JSON="$COVERAGE_DIR/layer-coverage/Domain/coverage.json"
if [[ -f "$DOMAIN_JSON" ]]; then
    DOMAIN_LINE=$(extract_coverage "$DOMAIN_JSON" "line")
    generate_badge "domain" "$DOMAIN_LINE" \
        "$(get_badge_color "$DOMAIN_LINE")" \
        "$OUTPUT_DIR/coverage-domain.svg"
    echo -e "${GREEN}✓ Generated: coverage-domain.svg (${DOMAIN_LINE}%)${NC}"
else
    echo -e "${YELLOW}⚠ No Domain layer coverage found${NC}"
fi

# Application layer
APP_JSON="$COVERAGE_DIR/layer-coverage/Application/coverage.json"
if [[ -f "$APP_JSON" ]]; then
    APP_LINE=$(extract_coverage "$APP_JSON" "line")
    generate_badge "application" "$APP_LINE" \
        "$(get_badge_color "$APP_LINE")" \
        "$OUTPUT_DIR/coverage-application.svg"
    echo -e "${GREEN}✓ Generated: coverage-application.svg (${APP_LINE}%)${NC}"
else
    echo -e "${YELLOW}⚠ No Application layer coverage found${NC}"
fi

# Infrastructure layer
INFRA_JSON="$COVERAGE_DIR/layer-coverage/Infrastructure/coverage.json"
if [[ -f "$INFRA_JSON" ]]; then
    INFRA_LINE=$(extract_coverage "$INFRA_JSON" "line")
    generate_badge "infrastructure" "$INFRA_LINE" \
        "$(get_badge_color "$INFRA_LINE")" \
        "$OUTPUT_DIR/coverage-infrastructure.svg"
    echo -e "${GREEN}✓ Generated: coverage-infrastructure.svg (${INFRA_LINE}%)${NC}"
else
    echo -e "${YELLOW}⚠ No Infrastructure layer coverage found${NC}"
fi

# Generate combined status badge
echo -e "${YELLOW}► Generating combined status badge...${NC}"

if [[ -n "${LINE_COVERAGE:-}" ]]; then
    if (( $(echo "$LINE_COVERAGE >= 80" | bc -l) )); then
        STATUS_TEXT="passing"
        STATUS_COLOR="brightgreen"
    elif (( $(echo "$LINE_COVERAGE >= 60" | bc -l) )); then
        STATUS_TEXT="acceptable"
        STATUS_COLOR="yellow"
    else
        STATUS_TEXT="failing"
        STATUS_COLOR="red"
    fi

    generate_badge "build" "$STATUS_TEXT" "$STATUS_COLOR" \
        "$OUTPUT_DIR/coverage-status.svg"
    echo -e "${GREEN}✓ Generated: coverage-status.svg (${STATUS_TEXT})${NC}"
fi

# Generate markdown snippet for README
echo -e "${YELLOW}► Creating README snippet...${NC}"

cat > "$OUTPUT_DIR/README-snippet.md" << EOF
<!-- Coverage Badges -->
![Coverage Status](./coverage-report/badges/coverage-status.svg)
![Line Coverage](./coverage-report/badges/coverage-line.svg)
![Branch Coverage](./coverage-report/badges/coverage-branch.svg)

### Layer Coverage
![Domain Coverage](./coverage-report/badges/coverage-domain.svg)
![Application Coverage](./coverage-report/badges/coverage-application.svg)
![Infrastructure Coverage](./coverage-report/badges/coverage-infrastructure.svg)
EOF

echo -e "${GREEN}✓ Generated: README-snippet.md${NC}"

echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${GREEN}✓ Badge generation complete!${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo -e "Badges saved to: ${OUTPUT_DIR}"
echo -e "Add to README: ${OUTPUT_DIR}/README-snippet.md"