// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProbotSharp.Infrastructure.Adapters.Persistence;

#nullable disable

namespace ProbotSharp.Infrastructure.Migrations
{
    [DbContext(typeof(ProbotSharpDbContext))]
    partial class ProbotSharpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("probot")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProbotSharp.Infrastructure.Adapters.Persistence.Models.DeadLetterQueueItemEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("id");

                    b.Property<int>("Attempt")
                        .HasColumnType("integer")
                        .HasColumnName("attempt");

                    b.Property<string>("DeliveryId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("delivery_id");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("event_name");

                    b.Property<DateTimeOffset>("FailedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("failed_at");

                    b.Property<long?>("InstallationId")
                        .HasColumnType("bigint")
                        .HasColumnName("installation_id");

                    b.Property<string>("LastError")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("last_error");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("RawPayload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("raw_payload");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("reason");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("signature");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId")
                        .HasDatabaseName("ix_dead_letter_queue_items_delivery_id");

                    b.HasIndex("FailedAt")
                        .HasDatabaseName("ix_dead_letter_queue_items_failed_at");

                    b.ToTable("dead_letter_queue_items", "probot");
                });

            modelBuilder.Entity("ProbotSharp.Infrastructure.Adapters.Persistence.Models.GitHubAppManifestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ManifestJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("manifest_json");

                    b.HasKey("Id");

                    b.ToTable("github_app_manifests", "probot");
                });

            modelBuilder.Entity("ProbotSharp.Infrastructure.Adapters.Persistence.Models.IdempotencyRecordEntity", b =>
                {
                    b.Property<string>("IdempotencyKey")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("idempotency_key");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("metadata");

                    b.HasKey("IdempotencyKey");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_idempotency_records_expires_at");

                    b.ToTable("idempotency_records", "probot");
                });

            modelBuilder.Entity("ProbotSharp.Infrastructure.Adapters.Persistence.Models.IssueMetadataEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("IssueNumber")
                        .HasColumnType("integer")
                        .HasColumnName("issue_number");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("key");

                    b.Property<string>("RepositoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("repository_name");

                    b.Property<string>("RepositoryOwner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("repository_owner");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryOwner", "RepositoryName", "IssueNumber", "Key")
                        .IsUnique()
                        .HasDatabaseName("ix_issue_metadata_composite_key");

                    b.ToTable("issue_metadata", "probot");
                });

            modelBuilder.Entity("ProbotSharp.Infrastructure.Adapters.Persistence.Models.WebhookDeliveryEntity", b =>
                {
                    b.Property<string>("DeliveryId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("delivery_id");

                    b.Property<DateTimeOffset>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("event_name");

                    b.Property<long?>("InstallationId")
                        .HasColumnType("bigint")
                        .HasColumnName("installation_id");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("PayloadHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("payload_hash");

                    b.HasKey("DeliveryId");

                    b.ToTable("webhook_deliveries", "probot");
                });
#pragma warning restore 612, 618
        }
    }
}
