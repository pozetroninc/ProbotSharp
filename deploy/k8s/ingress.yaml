apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: probotsharp
  namespace: probotsharp
  labels:
    app: probotsharp
    app.kubernetes.io/name: probotsharp
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"

    # cert-manager annotation for automatic TLS certificate provisioning
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

    # Rate limiting (optional - uncomment if needed)
    # nginx.ingress.kubernetes.io/limit-rps: "100"
    # nginx.ingress.kubernetes.io/limit-connections: "10"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - probotsharp.yourdomain.com
      secretName: probotsharp-tls
  rules:
    - host: probotsharp.yourdomain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: probotsharp
                port:
                  number: 80
---
# For production, set up a ClusterIssuer for Let's Encrypt:
# apiVersion: cert-manager.io/v1
# kind: ClusterIssuer
# metadata:
#   name: letsencrypt-prod
# spec:
#   acme:
#     server: https://acme-v02.api.letsencrypt.org/directory
#     email: your-email@example.com
#     privateKeySecretRef:
#       name: letsencrypt-prod
#     solvers:
#       - http01:
#           ingress:
#             class: nginx
