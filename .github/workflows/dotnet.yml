name: .NET CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    name: Build & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore
        run: dotnet restore ProbotSharp.sln
      - name: Build
        run: dotnet build ProbotSharp.sln --configuration Release --no-restore
      - name: Test with Coverage
        run: dotnet test ProbotSharp.sln --configuration Debug --settings coverlet.runsettings --collect:"XPlat Code Coverage"
      - name: Publish Coverage Report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: "tests/**/TestResults/**/coverage.cobertura.xml"
          fail_ci_if_error: false

  verify-links:
    name: Verify Markdown Links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Verify local links in Markdown files
        run: python3 scripts/verify-local-links.py

      - name: Verify GitHub links in Markdown files
        run: python3 scripts/verify-github-links.py

  verify-markdown-code:
    name: Verify Markdown C# Code Blocks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore ProbotSharp.sln

      - name: Build
        run: dotnet build ProbotSharp.sln --configuration Release --no-restore

      - name: Verify C# code blocks in Markdown files
        run: bash scripts/verify-markdown-code.sh

  test-examples:
    name: Docker E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test all examples
        run: ./scripts/testing/test-all-examples.sh
        timeout-minutes: 30

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: example-build-logs
          path: /tmp/*_build.log
          retention-days: 7
          if-no-files-found: ignore

  performance-trace:
    name: Performance Trace
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Install dotnet-trace
        run: dotnet tool install --global dotnet-trace
      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
      - name: Restore Dependencies
        run: dotnet restore ProbotSharp.sln
      - name: Restore HelloWorldBot
        run: dotnet restore examples/HelloWorldBot/HelloWorldBot.csproj
      - name: Build HelloWorldBot
        run: dotnet build examples/HelloWorldBot/HelloWorldBot.csproj -c Release --no-restore
      - name: Create dummy GitHub App private key
        run: |
          cat > /tmp/trace-dummy-key.pem <<'EOF'
          -----BEGIN RSA PRIVATE KEY-----
          MIIEowIBAAKCAQEA0Z6Wh6dULwk3p0c2EhjRz1EOwN+R0EQJfzH3AwiBvT7nPzUG
          ----END RSA PRIVATE KEY-----
          EOF
      - name: Run HelloWorldBot in background
        env:
          PROBOTSHARP__GITHUB__APPID: "123456"
          PROBOTSHARP__WEBHOOK_SECRET: "test-secret-for-tracing"
          PROBOTSHARP__GITHUB__PRIVATEKEYPATH: "/tmp/trace-dummy-key.pem"
          TMPDIR: /tmp
          DOTNET_DiagnosticPorts: ""
        run: |
          dotnet run --project examples/HelloWorldBot/HelloWorldBot.csproj -c Release > /tmp/app.log 2>&1 &
          echo $! > app.pid
          echo "Started HelloWorldBot with PID $(cat app.pid)"
      - name: Wait for app to initialize
        run: sleep 15
      - name: Send webhook workload in background
        env:
          WEBHOOK_SECRET: "test-secret-for-tracing"
        run: |
          # Start sending webhooks in background while trace runs
          for i in {1..20}; do
            # Send issues.opened webhook
            PAYLOAD=$(cat fixtures/issues-opened.json)
            SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | sed 's/^.* //')
            curl -X POST http://localhost:5000/api/github/webhooks \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: issues" \
              -H "X-GitHub-Delivery: $(uuidgen)" \
              -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
              -d "$PAYLOAD" &

            # Send pull_request.opened webhook
            PAYLOAD=$(cat fixtures/pull-request-opened.json)
            SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | sed 's/^.* //')
            curl -X POST http://localhost:5000/api/github/webhooks \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: pull_request" \
              -H "X-GitHub-Delivery: $(uuidgen)" \
              -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
              -d "$PAYLOAD" &

            sleep 0.5
          done &

          echo "Webhook workload started in background"
      - name: Check if process is running
        run: |
          PID=$(cat app.pid)
          echo "Checking if PID $PID is running..."
          ps -p $PID || (echo "Process not running!" && cat /tmp/app.log && exit 1)
          echo "Process is alive and running"
          echo "--- Checking dotnet-trace can see the process ---"
          dotnet-trace ps || true
          echo "--- Listing diagnostic sockets in /tmp ---"
          ls -la /tmp/dotnet-diagnostic-* || echo "No diagnostic sockets found"
          echo "--- App output so far ---"
          cat /tmp/app.log
      - name: Collect performance trace
        env:
          TMPDIR: /tmp
        run: |
          echo "Collecting trace from HelloWorldBot process..."
          echo "TMPDIR is set to: $TMPDIR"
          dotnet-trace collect --name HelloWorldBot --profile cpu-sampling --duration 00:00:30 -o trace.nettrace || (echo "Trace collection failed!" && exit 1)
      - name: Convert trace to Speedscope format
        run: dotnet-trace convert trace.nettrace --format Speedscope
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Restore baseline from cache
        id: restore-baseline
        uses: actions/cache/restore@v4
        with:
          path: perf-baseline.json
          key: perf-baseline-main-${{ github.sha }}
          restore-keys: |
            perf-baseline-main-
      - name: Analyze trace and compare to baseline
        run: |
          if [ -f perf-baseline.json ]; then
            echo "Comparing to baseline from main branch"
            python3 scripts/analyze-trace.py trace.speedscope.json \
              --output perf-metrics.json \
              --markdown perf-summary.md \
              --baseline perf-baseline.json
          else
            echo "No baseline found, generating initial metrics"
            python3 scripts/analyze-trace.py trace.speedscope.json \
              --output perf-metrics.json \
              --markdown perf-summary.md
          fi
      - name: Save to performance history
        run: |
          mkdir -p perf-history
          TIMESTAMP=$(date -u +%Y%m%d-%H%M%S)
          COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          cp perf-metrics.json "perf-history/${TIMESTAMP}-${COMMIT_SHORT}.json"
          # Keep only last 100 entries
          ls -t perf-history/*.json 2>/dev/null | tail -n +101 | xargs -r rm || true
          echo "Saved metrics to perf-history/${TIMESTAMP}-${COMMIT_SHORT}.json"
      - name: Display performance report
        run: |
          echo "## Performance Trace Analysis" >> $GITHUB_STEP_SUMMARY
          cat perf-summary.md >> $GITHUB_STEP_SUMMARY
      - name: Post performance report to PR
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create comment body with performance summary
          COMMENT_BODY="## üìä Performance Trace Report

          $(cat perf-summary.md)

          ---
          [View full trace](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) | [Download flamegraph](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          # Post comment to PR
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "$COMMENT_BODY"
      - name: Update baseline cache
        if: github.ref == 'refs/heads/main'
        uses: actions/cache/save@v4
        with:
          path: perf-metrics.json
          key: perf-baseline-main-${{ github.sha }}
      - name: Upload flamegraph artifact
        uses: actions/upload-artifact@v4
        with:
          name: flamegraph
          path: trace.speedscope.json
          retention-days: 7
      - name: Upload performance metrics
        uses: actions/upload-artifact@v4
        with:
          name: performance-metrics
          path: |
            perf-metrics.json
            perf-summary.md
            perf-history/
          retention-days: 30

  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [build-test, verify-links, verify-markdown-code, test-examples, performance-trace]
    steps:
      - run: echo "‚úÖ All tests passed successfully!"

  k8s-validation:
    name: K8s Validation Status
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - run: echo "‚ÑπÔ∏è  Kubernetes validation runs separately in validate-kubernetes workflow"
